"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersEntity = void 0;
const typeorm_1 = require("typeorm");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
var Type;
(function (Type) {
    Type["user"] = "user";
    Type["admin"] = "admin";
})(Type || (Type = {}));
let UsersEntity = class UsersEntity {
};
__decorate([
    typeorm_1.PrimaryGeneratedColumn(),
    class_validator_1.IsEmpty({ always: true, message: 'Do not send the ID!' }),
    __metadata("design:type", Number)
], UsersEntity.prototype, "id", void 0);
__decorate([
    typeorm_1.Column({ name: 'first_name', nullable: false }),
    class_validator_1.IsString({ always: true }),
    class_validator_1.MinLength(1, { always: true }),
    class_validator_1.MaxLength(255, { always: true }),
    __metadata("design:type", String)
], UsersEntity.prototype, "firstName", void 0);
__decorate([
    typeorm_1.Column({ name: 'last_name', nullable: false }),
    class_validator_1.IsString({ always: true }),
    class_validator_1.MinLength(1, { always: true }),
    class_validator_1.MaxLength(255, { always: true }),
    __metadata("design:type", String)
], UsersEntity.prototype, "lastName", void 0);
__decorate([
    typeorm_1.Column({ name: 'birth_of_date', nullable: true, type: 'date' }),
    __metadata("design:type", Date)
], UsersEntity.prototype, "birthOfDate", void 0);
__decorate([
    typeorm_1.Column({ unique: true, nullable: false }),
    class_validator_1.IsEmail({}, { always: true }),
    __metadata("design:type", String)
], UsersEntity.prototype, "email", void 0);
__decorate([
    typeorm_1.Column({ default: 'user' }),
    class_validator_1.IsEmpty({ always: true, message: 'Do not send the type!' }),
    __metadata("design:type", String)
], UsersEntity.prototype, "type", void 0);
__decorate([
    typeorm_1.Column({ nullable: false }),
    class_transformer_1.Exclude(),
    class_validator_1.IsString({ always: true }),
    class_validator_1.MinLength(6, { always: true }),
    class_validator_1.MaxLength(25, { always: true }),
    __metadata("design:type", String)
], UsersEntity.prototype, "password", void 0);
__decorate([
    typeorm_1.Column({ nullable: false }),
    class_transformer_1.Exclude(),
    class_validator_1.IsEmpty({ always: true, message: 'Do not send the salt' }),
    __metadata("design:type", String)
], UsersEntity.prototype, "salt", void 0);
UsersEntity = __decorate([
    typeorm_1.Entity({ name: 'users' })
], UsersEntity);
exports.UsersEntity = UsersEntity;
